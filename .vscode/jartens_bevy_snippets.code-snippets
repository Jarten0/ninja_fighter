{
    "create identifier": {
        "body": [
            "",
            "${0:use crate::scene::IDCounter;",
            "use crate::scene::Counter;}",
            "#[derive(Debug, Hash, PartialEq, Eq, PartialOrd, Ord, Clone, Copy)]",
            "pub struct ${1:NewID}(usize);",
            "",
            "impl IDCounter for ${1:NewID} {",
            "    fn get_new() -> ${1:NewID} {",
            "        pub static ${2:STATIC_ID_COUNTER}: Counter = Counter::new();",
            "        ${1:NewID}(${2:STATIC_ID_COUNTER}.get())",
            "    }",
            "}",
            ""
        ],
        "description": "Creates a new identifier that uses incrementors to boost values",
        "prefix": "identifier",
        "scope": "rust"
    },
    "get_scene": {
        "body": [
            "$0world",
            "   .get::<Scene>(${1:res}.target_scene.ok_or(SceneError::NoTargetScene)?)",
            "   .ok_or(SceneError::NoSceneComponent)?;",
        ],
        "description": "Gets the current Scene component, or returns a SceneError if the resource doesn't have one.",
        "prefix": "getscene",
        "scope": "rust"
    },
    "newtype deref implementations": {
        "body": [
            "impl Deref for $1 {",
            "    type Target = $2;",
            "",
            "    fn deref(&self) -> &$2 {",
            "        &self.0",
            "    }",
            "}",
            "",
            "impl DerefMut for $1 {",
            "    fn deref_mut(&mut self) -> &mut Self::Target {",
            "        &mut self.0",
            "    }",
            "}",
        ],
        "description": "Implements deref on the given type",
        "scope": "rust",
        "prefix": "newtype_deref"
    },
    "reflect_component": {
        "body": [
            "#[derive(Debug, Default, Clone, Component, Reflect)]",
            "#[reflect(Component)]",
            "pub struct $1 {",
            "    $0",
            "}"
        ],
        "description": "Creates a new component with reflect capabilities.",
        "prefix": "rcomponent",
        "scope": "rust"
    },
    "useful imports": {
        "body": [
            "use bevy_ecs::prelude::*;",
            "use bevy_ecs::reflect::Reflect;",
            "use ggez::graphics;",
            "use log::*;",
            "use serde::*;",
        ],
        "description": "Imports a bunch of generally useful crates and objects",
        "prefix": "import_useful",
        "scope": "rust"
    }
}