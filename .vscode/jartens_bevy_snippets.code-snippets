{
    "create identifier": {
        "body": [
            "",
            "${0:use crate::scene::IDCounter;",
            "use crate::scene::Counter;",
            "use bevy_reflect::Reflect;}",
            "#[derive(Debug, Hash, PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Reflect)]",
            "pub struct ${1:NewID}(usize);",
            "",
            "impl IDCounter for ${1:NewID} {",
            "    fn get_new() -> ${1:NewID} {",
            "        pub static ${2:STATIC_ID_COUNTER}: Counter = Counter::new();",
            "        ${1:NewID}(${2:STATIC_ID_COUNTER}.get())",
            "    }",
            "}",
            ""
        ],
        "description": "Creates a new identifier that uses incrementors to boost values",
        "prefix": "identifier",
        "scope": "rust"
    },
    "get_scene": {
        "body": [
            "$0world",
            "   .get::<Scene>(${1:res}.target_scene.ok_or(SceneError::NoTargetScene)?)",
            "   .ok_or(SceneError::NoSceneComponent)?;",
        ],
        "description": "Gets the current Scene component, or returns a SceneError if the resource doesn't have one.",
        "prefix": "getscene",
        "scope": "rust"
    },
    "newtype deref implementations": {
        "body": [
            "impl Deref for $1 {",
            "    type Target = $2;",
            "",
            "    fn deref(&self) -> &$2 {",
            "        &self.0",
            "    }",
            "}",
            "",
            "impl DerefMut for $1 {",
            "    fn deref_mut(&mut self) -> &mut Self::Target {",
            "        &mut self.0",
            "    }",
            "}",
        ],
        "description": "Implements deref on the given type",
        "scope": "rust",
        "prefix": "newtype_deref"
    },
    "reflect_component": {
        "body": [
            "#[derive(Debug, Default, Component, Reflect, Serialize, Deserialize)]",
            "#[reflect(Component)]",
            "pub struct $1 {",
            "    $0",
            "}"
        ],
        "description": "Creates a new component with reflect capabilities.",
        "prefix": "reflect_component",
        "scope": "rust"
    },
    "serialize_ignore_attributes": {
        "body": [
"#[reflect(ignore)]",
"#[serde(skip_serializing)]",
"#[serde(skip_deserializing)]",
        ],
        "description": "Adds some helper attributes to whatever fields you write",
        "prefix": "ignore",
        "scope": "rust",
    },
    "useful imports": {
        "body": [
            "use bevy_ecs::prelude::*;",
            "use bevy_reflect::Reflect;",
            "use ggez::graphics;",
            "use log::*;",
            "use serde::*;",
        ],
        "description": "Imports a bunch of generally useful crates and objects",
        "prefix": "import_useful",
        "scope": "rust"
    },
    "editor tab": {
        "body": [
"#[derive(Debug, Default)]",
"pub struct ${1:NewTab} {}",
"",
"impl engine::editor::EditorTab for ${1:NewTab} {",
"    fn name() -> &'static str",
"    where",
"        Self: Sized,",
"    {",
"        \"${1:NewTab}\"",
"    }",
"",
"    fn display_name(&self) -> String {",
"        \"${1:New Tab}\".to_string()",
"    }",
"",
"    fn ui(",
"        &mut self,",
"        window_state: &mut engine::editor::WindowState,",
"        ui: &mut egui::Ui,",
"    ) -> Option<engine::editor::TabResponse> {",
"        ${0:ui.label(\"Basic snippet implementation of editor tab\");}",
"",
"        None",
"    }",
"}",
"",            
        ],
        "description": "Pastes in a basic frame for creating a new editor tab.",
        "prefix": "editor_tab",
        "scope": "rust"
    },
    "Mutable world query": {
        "body": [
"for (${3:component}) in ${1:world}",
"    .query::<(&mut ${2:Component})>()",
"    .iter_mut(${1:world})",
"{",
"    $0",
"}",
"",        ],
        "description": "Creates a mutable query and iterates over each component obtained from it.",
        "prefix": "world_query_mut",
        "scope": "rust"
    },
    "Immutable world query": {
        "body": [
"for (${3:component}) in ${1:world}",
"    .query::<(&${2:Component})>()",
"    .iter(${1:world})",
"{",
"    $0",
"}",
"",        ],
        "description": "Creates an immutable query and iterates over each component obtained from it. (Remember that creating a query requires world mutability, regardless of how you iterate over it.)",
        "prefix": "world_query_ref",
        "scope": "rust"
    },
    "Serializable DrawParam field": {
        "body": [
"#[serde(serialize_with = \"engine::render::serialize_draw_param\")]",
"#[serde(deserialize_with = \"engine::render::deserialize_draw_param\")]",
"${0:draw_param}: ggez::graphics::DrawParam,",
        ],
        "description": "Creates a new field that uses the engine's implementation of Serialize and Deserialize for DrawParam",
        "prefix": "drawparamser",
        "scope": "rust"
    }
}